name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 7
        run_install: false

    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install

    - name: Lint
      run: pnpm lint

    - name: Run tests
      run: pnpm test

    - name: Build
      run: pnpm build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  build:
    needs: test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 7
        run_install: false

    - name: Install dependencies
      run: pnpm install

    - name: Build Electron app
      run: pnpm electron:build

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: video-assembler-${{ matrix.os }}
        path: |
          dist/*.dmg
          dist/*.exe
          dist/*.AppImage
        if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          artifacts/video-assembler-macos-latest/*.dmg
          artifacts/video-assembler-windows-latest/*.exe
          artifacts/video-assembler-ubuntu-latest/*.AppImage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        assets=()
        for asset in artifacts/video-assembler-*/*; do
          assets+=("-a" "$asset")
        done
        hub release create "${assets[@]}" -m "Release ${{ github.ref }}" "${{ github.ref }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}